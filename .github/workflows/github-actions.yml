name: Scalable Logging Excercise
on: [push]
jobs:
  build_app:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Setup pipenv environment
        run: |
          python -m pip install --upgrade pipenv wheel
          pipenv --version
          pipenv install --dev
      - name: Run pre-commit checks
        run: |
          pipenv run pre-commit run --all-files
      - name: Build the app container
        run: |
          pushd app
          docker build -t app .
          popd
      - name: Bring up app and db containers
        run: |
          docker-compose up -d
      - name: Run unit tests
        run: |
          pipenv run pytest --reruns 5 --reruns-delay 5
      - name: Cleanup app and db containers
        run: |
          docker-compose down
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Push the app container to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: scalable-logging
        run: |
          pushd app

          #TODO: Need to incorporate proper versioning
          export IMAGE_TAG="latest"
          echo "Release tag is ${IMAGE_TAG}"

          echo "Building and deploying the container locally."
          docker build -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} .

          echo "Pushing the container to ECR."
          docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
          popd

  deploy_app:
    needs: build_app
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Terraform Install
        run: |
          sudo apt-get update && sudo apt-get install -y gnupg software-properties-common curl
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get install terraform
          terraform --version
          echo "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}"
      - name: Deploy app
        run: |
          pushd terraform
          terraform init
          terraform plan
          terraform apply --auto-approve
          popd
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_db_name: ${{ secrets.TF_VAR_DB_NAME }}
          TF_VAR_db_username: ${{ secrets.TF_VAR_DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.TF_VAR_DB_PASSWORD }}
